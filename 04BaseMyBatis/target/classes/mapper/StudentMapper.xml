<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.syl.dao.StudentDao">
   <insert id="addStudent" parameterType="Student">
       INSERT  INTO  student(age,name)  VALUES (#{age},#{name})
   </insert>
    <insert id="addStudentByCache" parameterType="Student">
        INSERT  INTO  student(age,name)  VALUES (#{age},#{name})
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            SELECT @@IDENTITY
        </selectKey>
    </insert>
    <delete id="deleteStudent" parameterType="int">
        DELETE FROM student WHERE  id=#{xxx}
    </delete>
    <!--修改操作  传递的是一个student对象-->
    <update id="updateStudent" parameterType="Student">
        UPDATE  student SET name=#{name},age=#{age} WHERE id=#{id}
    </update>
    <!--查询所有的student-->
    <select id="selectAllStudents" resultType="Student">
        SELECT id,age,name FROM student
    </select>
    <!--查询所有的student  返回值是map
      如果我们写的是resultType="map"
      那么mybatis在底层会把我们的每个字段当成key
      字段对象的值 是value！  这样不可行！
      我们是想把某一个字段当成key!
      整行数据（对象）当成value！
      这时候就需要把resultType换成resultMap(结果映射)="映射的resultMap名称"
      mybatis底层会进行拦截ResultSet!
      然后根据我们在resultMap中的配置，
      把对应的key和value封装到map集合中！
    -->
    <select id="selectAllByMap" resultMap="studentMap">
        SELECT id,age,name FROM student
    </select>
    <!--
      01.数据库字段名和我们实体类属性名不一致   必须使用
      02.返回结果是map集合时  必须使用
      03.关联映射 以及延迟加载   必须使用
    -->
    <resultMap id="studentMap" type="Student">
        <id property="id" column="id"/><!--只针对于主键的设置-->
        <result property="age" column="age"/><!--设置除了主键，集合，对象之外的属性-->
        <result property="name" column="name"/>
    </resultMap>
    <!--根据指定的id查询对象-->
    <select id="selectStudentById" parameterType="int" resultType="Student">
        select id,name,age from student where id=#{xxx}
    </select>
    <!--根据学生name模糊查询
     SELECT id,name,age FROM student WHERE name LIKE '%' #{xxx} '%'-->
    <select id="selectByName" resultType="Student">
       SELECT id,name,age FROM student  where name like concat('%',#{xxx},'%')
    </select>
    <!--我们在前台表单中  有 三个输入框！
      用户输入了几个？？？我们不知道
      #{stuName}#{stuAge}
      必须是map集合中的key-->
    <select id="selectStduentsByMap" resultType="Student">
        select id,name,age from student
        where name like  concat('%',#{stuName},'%')
        and  age>#{stuAge}
        AND  id>#{student.id}
    </select>

    <!--按照参数的下标进行封装   下标从0开始-->
    <select id="selectStduentsByCondition" resultType="Student">
        select id,name,age from student
        where name like  concat('%',#{0},'%')
        and  age>#{1}
    </select>
    <!-- 01.用户传递一个Student对象  但是我们不知道用户对那些属性赋了值
         注意点  特殊字符的使用
         && （逻辑与）  必须换成 (and) 或者 (&amp;)
         where 1=1  每次拼接查询都会 执行 影响性能
      -->
    <select id="selectStudentsByIf" resultType="Student">
        SELECT  id,name,age from  student  where 1=1
        <if test="name!=null and name!=''">
            and  name like concat('%',#{name},'%')
        </if>
        <if test="age &gt; 0">
            and  age > #{age}
        </if>
    </select>
    <!--where 标签 替换where 1=1-->
    <select id="selectStudentsByWhere" resultType="Student">
        SELECT  id,name,age from  student
        <where>
            <if test="name!=null and name!=''">
                and  name like concat('%',#{name},'%')
            </if>
            <if test="age &gt; 0">
                and  age > #{age}
            </if>
        </where>
    </select>
    <!--
    choose标签    类似java中的switch
       01.当我们的年龄不为空 按照年龄查询
       02.当我们的姓名不为空 按照姓名查询
       03.如果都会空 执行otherwise
          如果没有otherwise标签，会查询所有
       04.如果多个条件满足，执行第一个满足的when
    如果条件只允许执行一个  就是用choose
      因为值执行一个sql  所以不需要加and
    想多个条件执行，使用if
      因为有多个sql需要拼接 所以 不能省略and
    在mybatis中 底层不会给我们生成and
    -->
    <select id="selectStudentsByChoose" resultType="Student">
        SELECT  id,name,age from  student
        <where>
            <choose>
                <when test="name!=null and name!=''">
                    name like concat('%',#{name},'%')
                </when>
                <when test="age > 0">
                    age>#{age}
                </when>
                <otherwise>
                    id=1
                </otherwise>
            </choose>
        </where>
    </select>
    <!-- foreach 遍历数组
    我们之前在mysql中查询的语句
    SELECT  id,NAME,age FROM student   WHERE id IN (1,2,3)
    问题？？
    01.我们知道用户输入的是1,2,3,吗？？？
    02.1,2,3是动态获取的  是dao中方法的参数 int [] nums
    03.nums的每个元素 就是  1,2,3
    04.用户是不是有可能一个值都没有传入
    05.只要是数组    在mybatis对应的值就是array
     -->
    <select id="selectStudentsByForeachArray" resultType="Student">
        SELECT  id,NAME,age FROM student
        <if test="array.length>0"> /*证明用户有值传入*/
            where id IN         /*(1,2,3) 动态的拼接*/
            <foreach collection="array" item="varId" open="(" separator="," close=")">
                #{varId}
            </foreach>
        </if>
    </select>
    <!--遍历 List集合  在mybatis对应的值就是list-->
    <select id="selectStudentsByForeachList" resultType="Student">
        SELECT  id,NAME,age FROM student
        <if test="list.size>0">
            where id IN
            <foreach collection="list" item="varId" open="(" separator="," close=")">
                #{varId}
            </foreach>
        </if>
    </select>
    <!--遍历 Student集合 -->
    <select id="selectStudentsByForeachStudent" resultType="Student">
        SELECT  id,NAME,age FROM student
        <if test="list.size>0">
            where id IN
            <foreach collection="list" item="stu" open="(" separator="," close=")">
                #{stu.id} /*必须是对象中的属性*/
            </foreach>
        </if>
    </select>
    <!--遍历 map集合   map集合在mybatis中没有设置对应的值
    myMap就是我们dao层方法的@Param("myMap")
    遍历myMap.keys 就是获取map集合中的所有key的集合
    -->
    <select id="selectStudentsByForeachMap" resultType="Student">
        <include refid="seleteStudents"/>
        where id IN
        <if test="myMap.keys.size>0">
            <foreach collection="myMap.keys"  item="mapKey" open="(" separator="," close=")">
                #{mapKey}
            </foreach>
        </if>
    </select>

    <!--
     sql片段：  提取mapper文件中所有的sql公共部分
    -->

    <sql id="seleteStudents">
        SELECT  id,NAME,age FROM student
    </sql>
</mapper>